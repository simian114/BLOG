generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model guestbooks {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.VarChar(1000)
  ip        String   @db.VarChar(16)
  nickname  String   @db.VarChar(40)
}

// NOTE: Route
// A Category can have zero or more Post
// A Post must always have an Category
// A Post can have zero or more Tag
// A Tag must always have an Post

model Route {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  title       String
  description String?
  open        Boolean
  url         String

  priority Int @default(autoincrement())

  layoutType RouteLayoutType

  categories Category[]

  // NOTE: route 페이지에서 post 보여줄 경우 대비
  post Post?
}

enum RouteLayoutType {
  CARD
  TABLE
  CUSTOM
}

model Category {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  title       String    @db.VarChar(25)
  url         String
  description String?

  // NOTE: Relation
  route   Route? @relation(fields: [routeId], references: [id])
  routeId Int?

  posts Post[]
}

model Post {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  // 
  title       String
  content     String?
  description String?
  published   Boolean   @default(false)

  // NOTE: relations
  tags       TagsOnPosts[]
  category   Category?     @relation(fields: [categoryId], references: [id])
  categoryId Int?
  info       PostInfo?

  route   Route? @relation(fields: [routeId], references: [id])
  routeId Int?   @unique
}

model PostInfo {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  readingTime Int
  url         String   @unique
  slug        String[]

  post   Post @relation(fields: [postId], references: [id])
  postId Int  @unique
}

model Tag {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  // 
  title       String
  description String?
  color       TagColor

  // NOTE: Relation
  posts TagsOnPosts[]
}

enum TagColor {
  GRAY
  PRIMARY
  SECONDARY
  TERTIARY
  CYAN
  CRIMSON
  YELLOW
  BLUE
  BROWN
  GREEN
  ORANGE
  PINK
  PURPLE
  RED
}

model TagsOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, tagId])
}

// TODO: Curation
