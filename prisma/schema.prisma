generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// NOTE: Route
// A Category can have zero or more Post
// A Post must always have an Category
// A Post can have zero or more Tag
// A Tag must always have an Post

// type: SUB_URL
// extendedData: {
//   post: table / card
//   selector: CATEGORY / TAG
// }
//
// type: COMPONENT
// extendedData: {
//   name: server component name
// }
//

// name: SimplePost
// type: Component
// props: null
//
// name: CategorySelector / TagSelector
// type: Sub_URL
// props: { type: tag / category, post: table / card }
//

enum SUB_URL_SELECTOR {
  CATEGORY
  TAG
}

enum ComponentType {
  SUB_URL
  COMPONENT
  CURATION
}

model Component {
  id Int @id @default(autoincrement())
  name String
  props Json?
  type LayoutType
  route   Route? @relation(fields: [routeId], references: [id])
  routeId Int?
}

enum ROUTE_TYPE {
  BESPOKE
  CUSTOM
}

model Route {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  title       String
  description String?
  open        Boolean // NOTE: header 영역에 보일지 여부를 정함
  url         String  @unique

  priority Int @default(autoincrement())
  type ROUTE_TYPE

  categories Category[]
  posts      Post[]

  // NOTE: route 페이지에서 post 보여줄 경우 대비
  components Component[]
}

model Category {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  title       String    @db.VarChar(25)
  url         String
  description String?

  // NOTE: Relation
  route   Route? @relation(fields: [routeId], references: [id])
  routeId Int?

  posts Post[]
}

model Post {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  // 
  url         String // NOTE: encoding 과정에서 - 는 공백으로 치환됨. 공백은 디코딩 과정에서 - 로 치환됨
  title       String
  content     String?
  description String?
  published   Boolean?   @default(false)

  // NOTE: like computed fields by route / category
  readingTime Int?

  // NOTE: relations
  tags       TagsOnPosts[]
  category   Category?     @relation(fields: [categoryId], references: [id])
  categoryId Int?

  route   Route? @relation(fields: [routeId], references: [id])
  routeId Int?
}

model Tag {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  // 
  title       String
  description String?
  color       TagColor
  url         String    @unique

  // NOTE: Relation
  posts TagsOnPosts[]
}

model TagsOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, tagId])
}

model guestbooks {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.VarChar(1000)
  ip        String   @db.VarChar(16)
  nickname  String   @db.VarChar(40)
}

// NOTE: ENUMS

// NOTE: CURATION 은 나중에... 대표 포스트 선정 등에 사용할 예정. 아직 설계못함
enum LayoutType {
  SUB_URL
  COMPONENT
  CURATION
}

enum SubUrlSelector {
  CATEGORY
  TAG
}

enum SubUrlPost {
  CARD
  TABLE
}

enum TagColor {
  GRAY
  PRIMARY
  SECONDARY
  TERTIARY
  CYAN
  CRIMSON
  YELLOW
  BLUE
  BROWN
  GREEN
  ORANGE
  PINK
  PURPLE
  RED
}

// NOTE: json 에서 사용할 type. 자동생성되지 않음
model Temp {
  id             Int            @id
  subUrlSelector SubUrlSelector
  componentType  ComponentType
  subUrlPost     SubUrlPost
  selector SUB_URL_SELECTOR
}


// TODO: Curation
